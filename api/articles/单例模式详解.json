{"title":"Singleton Pattern","uid":"8036a700aebd79e808b6b9883f20311f","slug":"单例模式详解","date":"2024-12-07T03:19:26.566Z","updated":"2024-12-08T01:09:42.095Z","comments":true,"path":"api/articles/单例模式详解.json","keywords":null,"cover":null,"content":"<h1 id=\"单例模式详解\"><a href=\"#单例模式详解\" class=\"headerlink\" title=\"单例模式详解\"></a>单例模式详解</h1><h2 id=\"单例模式是什么\"><a href=\"#单例模式是什么\" class=\"headerlink\" title=\"单例模式是什么\"></a>单例模式是什么</h2><p>单例模式是一种创建型设计模式，<strong>他确保一个类在整个程序运行过程中只有一个实例，并提供全局访问点来获取该实例。</strong></p>\n<p>单例模式的核心思想是：控制对象的实例化，防止创建多个实例，从而节省资源并保证行为一致性。</p>\n<h2 id=\"单例模式的特点\"><a href=\"#单例模式的特点\" class=\"headerlink\" title=\"单例模式的特点\"></a>单例模式的特点</h2><p>1.<strong>唯一性</strong>：类的实例在整个程序生命周期只有一个。</p>\n<p>2.<strong>全局访问</strong>：提供一个全局访问点，让所有代码可以访问同一个实例。</p>\n<p>3.<strong>延迟加载</strong>：可以延迟实例化，在需要时才创建实例（如懒汉式实现方式）。</p>\n<h2 id=\"常见使用场景\"><a href=\"#常见使用场景\" class=\"headerlink\" title=\"常见使用场景\"></a>常见使用场景</h2><p>1.<strong>资源管理</strong>：需要共享的资源如数据库连接池、线程池等，确保只有一个实例管理这些资源。</p>\n<p>2.<strong>全局配置</strong>：用于保存程序的配置信息，所有模块都可以访问和使用同一个配置示例。</p>\n<p>3.<strong>日志记录器</strong>：在多线程或分布式环境中确保日志记录器唯一性。</p>\n<h2 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h2><p><strong>1.饿汉式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EagerSingleton</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 类加载时就初始化实例</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">EagerSingleton</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">EagerSingleton</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 私有构造函数防止外部实例化</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">EagerSingleton</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 提供全局访问点</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> EagerSingleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 其他业务方法...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.1懒汉式（未考虑线程安全）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LazySingleton</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实例在第一次调用 getInstance 时创建</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> LazySingleton instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 私有构造函数防止外部实例化</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">LazySingleton</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 提供全局访问点，不考虑线程安全</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazySingleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> <span class=\"title class_\">LazySingleton</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 其他业务方法...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.2懒汉式（使用同步方法实现线程安全）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadSafeLazySingleton</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ThreadSafeLazySingleton instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">ThreadSafeLazySingleton</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用同步方法保证线程安全</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> ThreadSafeLazySingleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadSafeLazySingleton</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 其他业务方法...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.3懒汉式（使用双重检查锁定实现线程安全）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DoubleCheckedLockingSingleton</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// volatile 关键字确保 instance 的可见性</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> DoubleCheckedLockingSingleton instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">DoubleCheckedLockingSingleton</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DoubleCheckedLockingSingleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (DoubleCheckedLockingSingleton.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> <span class=\"title class_\">DoubleCheckedLockingSingleton</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 其他业务方法...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3.静态内部类（线程安全）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingletonWithStaticInnerClass</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 私有构造函数防止外部实例化</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">SingletonWithStaticInnerClass</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 静态内部类，仅当调用 getInstance 时才加载</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingletonHolder</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">SingletonWithStaticInnerClass</span> <span class=\"variable\">INSTANCE</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SingletonWithStaticInnerClass</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 提供全局访问点</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonWithStaticInnerClass <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 其他业务方法...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用静态内部类的方式是一种懒加载的单例模式实现，它利用了Java的类加载机制确保线程安全，而不需要额外的同步代码。这种方式只有在第一次调用 <code>getInstance</code> 方法时才会加载内部类并初始化实例，因此是延迟加载且线程安全的。这种实现方式不仅实现了懒加载，而且由于JVM的类加载机制保证了线程安全性，所以不需要使用同步关键字或双重检查锁定。</p>\n<p><strong>4.枚举单例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">EnumSingleton</span> &#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 可以添加其他属性和方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">someMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 方法实现...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>枚举类型的单例模式是最简单、最安全的一种实现方式。根据《Effective Java》作者Joshua Bloch的说法，这是实现单例模式的最佳实践。枚举天生就支持序列化机制，并防止反射攻击，因为Java不允许通过反射创建新的枚举实例。使用枚举实现单例模式非常简洁，只需要定义一个枚举常量即可。由于枚举类型的特殊性，它天然就是线程安全的，并且可以防止反序列化或反射攻击创建新的实例。</p>\n","feature":true,"text":"本文详细解释了单例模式的概念、实现方式以及应用场景，帮助开发者更好地理解和使用这一设计模式。...","permalink":"/post/单例模式详解","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"Design Patterns","slug":"Design-Patterns","count":3,"path":"api/categories/Design-Patterns.json"}],"tags":[{"name":"Design Patterns","slug":"Design-Patterns","count":3,"path":"api/tags/Design-Patterns.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">单例模式详解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">单例模式是什么</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">单例模式的特点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">常见使用场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">实现方式</span></a></li></ol></li></ol>","author":{"name":"零六贰肆","slug":"blog-author","avatar":"https://images.pexels.com/photos/3573603/pexels-photo-3573603.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","link":"/","description":"一位菜狗Java开发者 <br /> @ <b>公众号：菜狗学计算机</b>","socials":{"github":"https://github.com/Java-Yzh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://m.weibo.cn/profile/7508415765","zhihu":"https://www.zhihu.com/people/xia-shang-58-1","csdn":"https://blog.csdn.net/c_rubbish_?spm=1000.2115.3001.5343","juejin":"https://juejin.cn/user/3881713790103274","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Decorator Pattern","uid":"0bfd72c698ef240dfe9fc1748b5eeac0","slug":"装饰器模式详解","date":"2024-12-07T03:31:45.516Z","updated":"2024-12-08T01:09:22.651Z","comments":true,"path":"api/articles/装饰器模式详解.json","keywords":null,"cover":null,"text":"本文详细解释了装饰器模式的概念、实现方式以及应用场景，帮助开发者更好地理解和使用这一设计模式。...","permalink":"/post/装饰器模式详解","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"Design Patterns","slug":"Design-Patterns","count":3,"path":"api/categories/Design-Patterns.json"}],"tags":[{"name":"Design Patterns","slug":"Design-Patterns","count":3,"path":"api/tags/Design-Patterns.json"}],"author":{"name":"零六贰肆","slug":"blog-author","avatar":"https://images.pexels.com/photos/3573603/pexels-photo-3573603.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","link":"/","description":"一位菜狗Java开发者 <br /> @ <b>公众号：菜狗学计算机</b>","socials":{"github":"https://github.com/Java-Yzh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://m.weibo.cn/profile/7508415765","zhihu":"https://www.zhihu.com/people/xia-shang-58-1","csdn":"https://blog.csdn.net/c_rubbish_?spm=1000.2115.3001.5343","juejin":"https://juejin.cn/user/3881713790103274","customs":{}}},"feature":true},"next_post":{}}