{"title":"Decorator Pattern","uid":"0bfd72c698ef240dfe9fc1748b5eeac0","slug":"装饰器模式详解","date":"2024-12-07T03:31:45.516Z","updated":"2024-12-08T01:09:22.651Z","comments":true,"path":"api/articles/装饰器模式详解.json","keywords":null,"cover":null,"content":"<h1 id=\"装饰器模式\"><a href=\"#装饰器模式\" class=\"headerlink\" title=\"装饰器模式\"></a>装饰器模式</h1><h2 id=\"装饰器模式是什么\"><a href=\"#装饰器模式是什么\" class=\"headerlink\" title=\"装饰器模式是什么\"></a>装饰器模式是什么</h2><p>装饰器模式是一种结构型设计模式，<strong>用于在不改变现有类的情况下动态为其添加新的功能</strong>。通过将对象嵌套在装饰器中，可以实现功能扩展，同时保留原对象的行为。</p>\n<p>主要作用是给原始类<strong>增强功能</strong>，一般使用组合形式对原始类进行一定的扩展，并且可以将多个装饰器组合在一起，实现多个功能的叠加。（多个装饰器组合需要装饰类与原始类实现了同样的接口或继承同样的抽象类）</p>\n<h2 id=\"装饰器模式的特点\"><a href=\"#装饰器模式的特点\" class=\"headerlink\" title=\"装饰器模式的特点\"></a>装饰器模式的特点</h2><p>1.<strong>动态扩展</strong>：无需修改原始类的代码即可添加新功能。</p>\n<p>2.<strong>遵循开闭原则</strong>：对扩展开放，对修改关闭。</p>\n<p>3.<strong>灵活组合</strong>：装饰器可以嵌套组合，形成复杂的功能。</p>\n<h2 id=\"常见使用场景\"><a href=\"#常见使用场景\" class=\"headerlink\" title=\"常见使用场景\"></a>常见使用场景</h2><p>1.<strong>需要动态扩展功能</strong>：对现有对象添加功能，但不希望通过继承方式。</p>\n<p>2.<strong>不同组合的功能需求</strong>：功能可以按需组合，而不需要创建大量子类。</p>\n<p>3.<strong>透明扩展</strong>：客户端无需了解对象是否被装饰过。</p>\n<h2 id=\"典型场景\"><a href=\"#典型场景\" class=\"headerlink\" title=\"典型场景\"></a>典型场景</h2><p>1.<strong>日志系统</strong>：在日志系统中动态添加时间戳、日志级别等信息。</p>\n<p>2.<strong>网络编程</strong>：为网络流添加缓存、压缩、加密功能。</p>\n<h2 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h2><p>装饰器模式通常由四部分组成：</p>\n<p>1.<strong>Component（组件接口）</strong>：定义了对象的接口，可以给这些对象动态地添加职责。所有具体组件和装饰器都实现这个接口。</p>\n<p>2.<strong>ConcreteComponent（具体组件）</strong>：实现了 Component 接口，定义了一个具体的对象，也可以说是装饰器模式的基本对象。它提供了装饰器所增强的基础功能。</p>\n<p>3.<strong>Decorator（装饰器抽象类）</strong>：也实现了 Component 接口，并包含一个对 Component 的引用（通常是通过构造函数传递），用于包装具体组件或其它装饰器。它定义了在具体装饰器中可以被重写的行为。此抽象类不是必须的；有时直接从 Component 继承的具体装饰器就足够了。</p>\n<p>4.<strong>ConcreteDecorator（具体装饰器）</strong>：扩展自 Decorator 类，负责给组件对象动态地添加职责。每个具体装饰器都可以提供额外的状态和行为，并且可以在调用前后操作其包装的组件对象。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个组件接口</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Message</span> &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">getContent</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体组件类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SimpleMessage</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Message</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String content;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SimpleMessage</span><span class=\"params\">(String content)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.content = content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getContent</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽象装饰器类</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MessageDecorator</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Message</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Message message;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MessageDecorator</span><span class=\"params\">(Message message)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getContent</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message.getContent();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体装饰器类 - 加粗装饰器</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BoldDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">MessageDecorator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">BoldDecorator</span><span class=\"params\">(Message message)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getContent</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&lt;b&gt;&quot;</span> + <span class=\"built_in\">super</span>.getContent() + <span class=\"string\">&quot;&lt;/b&gt;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体装饰器类 - 斜体装饰器</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ItalicDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">MessageDecorator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ItalicDecorator</span><span class=\"params\">(Message message)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getContent</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&lt;i&gt;&quot;</span> + <span class=\"built_in\">super</span>.getContent() + <span class=\"string\">&quot;&lt;/i&gt;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试装饰器模式</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DecoratorTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Message</span> <span class=\"variable\">simpleMessage</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleMessage</span>(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Message</span> <span class=\"variable\">boldMessage</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BoldDecorator</span>(simpleMessage);</span><br><span class=\"line\">        <span class=\"type\">Message</span> <span class=\"variable\">italicBoldMessage</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ItalicDecorator</span>(boldMessage);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(italicBoldMessage.getContent());</span><br><span class=\"line\">        <span class=\"comment\">// 输出: &lt;i&gt;&lt;b&gt;Hello World!&lt;/b&gt;&lt;/i&gt;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","feature":true,"text":"本文详细解释了装饰器模式的概念、实现方式以及应用场景，帮助开发者更好地理解和使用这一设计模式。...","permalink":"/post/装饰器模式详解","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"Design Patterns","slug":"Design-Patterns","count":3,"path":"api/categories/Design-Patterns.json"}],"tags":[{"name":"Design Patterns","slug":"Design-Patterns","count":3,"path":"api/tags/Design-Patterns.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">装饰器模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">装饰器模式是什么</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">装饰器模式的特点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">常见使用场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B8%E5%9E%8B%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">典型场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">实现方式</span></a></li></ol></li></ol>","author":{"name":"零六贰肆","slug":"blog-author","avatar":"https://images.pexels.com/photos/3573603/pexels-photo-3573603.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","link":"/","description":"一位菜狗Java开发者 <br /> @ <b>公众号：菜狗学计算机</b>","socials":{"github":"https://github.com/Java-Yzh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://m.weibo.cn/profile/7508415765","zhihu":"https://www.zhihu.com/people/xia-shang-58-1","csdn":"https://blog.csdn.net/c_rubbish_?spm=1000.2115.3001.5343","juejin":"https://juejin.cn/user/3881713790103274","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Design Patterns","uid":"cfba112d122acdd551a96bb15a87ba8b","slug":"GoF设计模式","date":"2024-12-07T03:31:52.270Z","updated":"2024-12-08T01:09:32.325Z","comments":true,"path":"api/articles/GoF设计模式.json","keywords":null,"cover":null,"text":"本文详细解释了设计模式的概念、作用等，帮助开发者更好地理解和使用设计模式。...","permalink":"/post/GoF设计模式","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"Design Patterns","slug":"Design-Patterns","count":3,"path":"api/categories/Design-Patterns.json"}],"tags":[{"name":"Design Patterns","slug":"Design-Patterns","count":3,"path":"api/tags/Design-Patterns.json"}],"author":{"name":"零六贰肆","slug":"blog-author","avatar":"https://images.pexels.com/photos/3573603/pexels-photo-3573603.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","link":"/","description":"一位菜狗Java开发者 <br /> @ <b>公众号：菜狗学计算机</b>","socials":{"github":"https://github.com/Java-Yzh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://m.weibo.cn/profile/7508415765","zhihu":"https://www.zhihu.com/people/xia-shang-58-1","csdn":"https://blog.csdn.net/c_rubbish_?spm=1000.2115.3001.5343","juejin":"https://juejin.cn/user/3881713790103274","customs":{}}},"feature":true},"next_post":{"title":"Singleton Pattern","uid":"8036a700aebd79e808b6b9883f20311f","slug":"单例模式详解","date":"2024-12-07T03:19:26.566Z","updated":"2024-12-08T01:09:42.095Z","comments":true,"path":"api/articles/单例模式详解.json","keywords":null,"cover":null,"text":"本文详细解释了单例模式的概念、实现方式以及应用场景，帮助开发者更好地理解和使用这一设计模式。...","permalink":"/post/单例模式详解","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"Design Patterns","slug":"Design-Patterns","count":3,"path":"api/categories/Design-Patterns.json"}],"tags":[{"name":"Design Patterns","slug":"Design-Patterns","count":3,"path":"api/tags/Design-Patterns.json"}],"author":{"name":"零六贰肆","slug":"blog-author","avatar":"https://images.pexels.com/photos/3573603/pexels-photo-3573603.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","link":"/","description":"一位菜狗Java开发者 <br /> @ <b>公众号：菜狗学计算机</b>","socials":{"github":"https://github.com/Java-Yzh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://m.weibo.cn/profile/7508415765","zhihu":"https://www.zhihu.com/people/xia-shang-58-1","csdn":"https://blog.csdn.net/c_rubbish_?spm=1000.2115.3001.5343","juejin":"https://juejin.cn/user/3881713790103274","customs":{}}},"feature":true}}