{"title":"Design Patterns","uid":"cfba112d122acdd551a96bb15a87ba8b","slug":"GoF设计模式","date":"2024-12-07T03:31:52.270Z","updated":"2024-12-08T01:09:32.325Z","comments":true,"path":"api/articles/GoF设计模式.json","keywords":null,"cover":null,"content":"<h1 id=\"GoF设计模式\"><a href=\"#GoF设计模式\" class=\"headerlink\" title=\"GoF设计模式\"></a>GoF设计模式</h1><h2 id=\"设计模式是什么\"><a href=\"#设计模式是什么\" class=\"headerlink\" title=\"设计模式是什么\"></a>设计模式是什么</h2><p>设计模式其实是在软件开发过程中经过经验积累和验证总结得出的<strong>一套通用代码设计方案</strong>，是踩在巨人的肩膀上总结的设计成课。</p>\n<p>如果熟悉了设计模式，当遇到类似的场景，我们可以快速地参考设计模式实现代码。不仅可以加速我们的编码速度，也提升了代码的<strong>可扩展性</strong>、<strong>可重用性</strong>与<strong>可维护性</strong>！</p>\n<h2 id=\"设计模式的作用\"><a href=\"#设计模式的作用\" class=\"headerlink\" title=\"设计模式的作用\"></a>设计模式的作用</h2><p>1.<strong>帮助我们快速解决常见问题</strong>：设计模式提供了解决特定软件设计问题的通用方法，拿来套上即用，例如单例模式、代理模式、责任链模式等等。</p>\n<p>2.<strong>提升代码可扩展性</strong>：设计模式通常考虑了软件的扩展性，将不同的功能和功能变化分离开来实现，使得未来添加新功能更加容易。</p>\n<p>3.<strong>提高代码可重用性</strong>：设计模式本身就是经验的总结，按照设计模式的思路，很多代码封装的很殿好，便于复用，减少重复工作。</p>\n<p>4.<strong>提升代码可维护性</strong>：通过使用设计模式，使得代码结构更加清晰，易于理解和维护。</p>\n<p>5.<strong>简化沟通成本</strong>：如果大家都熟悉设计模式，其实设计模式就是一种通用语言，通过设计就能明白其实现含义，有助于开发者之间更有效地沟通设计意图。</p>\n<p>6.<strong>提供最佳实践</strong>：它们是经验的总结，可以指导开发者避免常见陷阱，采用最佳实践。</p>\n<h2 id=\"设计模式分类\"><a href=\"#设计模式分类\" class=\"headerlink\" title=\"设计模式分类\"></a>设计模式分类</h2><p>1.<strong>创建型模式</strong>(Creational Patterns)</p>\n<p>用于创健对象的模式，同时隐藏对象创建的逻辑，避免代码中出现大量new操作和复杂的创健逻辑。目的是解耦对象的创健和使用</p>\n<p>常用的有：单例模式、工厂模式、建造者模式。</p>\n<p>不常见的有：原型模式。</p>\n<p>2.<strong>结构型模式</strong>(Structural Patterns):</p>\n<p>用于处理对象组合的结构，关注类与对象的组合。目的是通过组合对象或类的方式，形成更大的结构。</p>\n<p>常用的有：适配器模式、桥接模式、组合模式、装饰器模式、代理模式。</p>\n<p>不常见的有：外观模式（门面模式）、享元模式。</p>\n<p>3.<strong>行为型模式</strong>(Behavioral Patterns):</p>\n<p>用于定义对象如何相互协作以完成单个对象无法单独实现的任务，目的是定义类和对象间的通信方式。</p>\n<p>常用的有：观察者模式、责任链模式、策略模式、模板模式、状态模式、迭代器模式。</p>\n<p>不常见的有：备忘录模式、命令模式、中介者模式、访问者模式、解释器模式。</p>\n<h2 id=\"部分设计模式的应用示例\"><a href=\"#部分设计模式的应用示例\" class=\"headerlink\" title=\"部分设计模式的应用示例\"></a>部分设计模式的应用示例</h2><p>1.<strong>创建型模式</strong>：</p>\n<p>单例模式：数据库连接池、线程池。</p>\n<p>工厂方法模式：日志记录器。</p>\n<p>建造者模式：复杂对象的分步构建，如HTML文档生成器。</p>\n<p>2.<strong>结构型模式</strong>：</p>\n<p>适配器摸式：旧系统的兼容升级。</p>\n<p>装饰器模式：动态为对象增加功能，如Java IO流。</p>\n<p>代理模式：实现访问控制，如RPC调用。</p>\n<p>3.<strong>行为型模式</strong>：</p>\n<p>观察者模式：事件驱动系统，如订阅-发布系统。</p>\n<p>责任链模式：日志级别过滤、请求处理链。</p>\n<p>策略模式：支付方式选择（如微信、支付宝、信用卡）。</p>\n","feature":true,"text":"本文详细解释了设计模式的概念、作用等，帮助开发者更好地理解和使用设计模式。...","permalink":"/post/GoF设计模式","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"Design Patterns","slug":"Design-Patterns","count":3,"path":"api/categories/Design-Patterns.json"}],"tags":[{"name":"Design Patterns","slug":"Design-Patterns","count":3,"path":"api/tags/Design-Patterns.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#GoF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">GoF设计模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">设计模式是什么</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">设计模式的作用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">设计模式分类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%83%A8%E5%88%86%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%BA%94%E7%94%A8%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">部分设计模式的应用示例</span></a></li></ol></li></ol>","author":{"name":"零六贰肆","slug":"blog-author","avatar":"https://images.pexels.com/photos/3573603/pexels-photo-3573603.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","link":"/","description":"一位菜狗Java开发者 <br /> @ <b>公众号：菜狗学计算机</b>","socials":{"github":"https://github.com/Java-Yzh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://m.weibo.cn/profile/7508415765","zhihu":"https://www.zhihu.com/people/xia-shang-58-1","csdn":"https://blog.csdn.net/c_rubbish_?spm=1000.2115.3001.5343","juejin":"https://juejin.cn/user/3881713790103274","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"Decorator Pattern","uid":"0bfd72c698ef240dfe9fc1748b5eeac0","slug":"装饰器模式详解","date":"2024-12-07T03:31:45.516Z","updated":"2024-12-08T01:09:22.651Z","comments":true,"path":"api/articles/装饰器模式详解.json","keywords":null,"cover":null,"text":"本文详细解释了装饰器模式的概念、实现方式以及应用场景，帮助开发者更好地理解和使用这一设计模式。...","permalink":"/post/装饰器模式详解","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"Design Patterns","slug":"Design-Patterns","count":3,"path":"api/categories/Design-Patterns.json"}],"tags":[{"name":"Design Patterns","slug":"Design-Patterns","count":3,"path":"api/tags/Design-Patterns.json"}],"author":{"name":"零六贰肆","slug":"blog-author","avatar":"https://images.pexels.com/photos/3573603/pexels-photo-3573603.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","link":"/","description":"一位菜狗Java开发者 <br /> @ <b>公众号：菜狗学计算机</b>","socials":{"github":"https://github.com/Java-Yzh","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://m.weibo.cn/profile/7508415765","zhihu":"https://www.zhihu.com/people/xia-shang-58-1","csdn":"https://blog.csdn.net/c_rubbish_?spm=1000.2115.3001.5343","juejin":"https://juejin.cn/user/3881713790103274","customs":{}}},"feature":true}}